import rdflib
from rdflib import URIRef
from StringIO import StringIO


class RDFParser(object):
    """This little gem (not to be confused with a Ruby gem) loads and
    parses an RDF file."""

    def __init__(self, data, namespace=None):
        # Load up and parse the file in XML format.
        graph = rdflib.Graph()

        self.manifest = u"urn:mozilla:install-manifest"
        self.namespace = "http://www.mozilla.org/2004/em-rdf"
        if namespace is not None:
            self.namespace = namespace

        # Try it!
        if not isinstance(data, StringIO):
            pseudo_file = StringIO(data)  # Wrap data in a pseudo-file
        else:
            pseudo_file = data

        try:
            graph.parse(pseudo_file, format="xml")
        except Exception as error:
            self.rdf = None
            return
        else:
            self.rdf = graph

    def uri(self, element, namespace=None):
        "Returns a URIRef object for use with the RDF document."

        if namespace is None:
            namespace = self.namespace

        return URIRef("%s#%s" % (namespace, element))

    def get_root_subject(self):
        "Returns the BNode which describes the topmost subject of the graph."

        manifest = rdflib.term.URIRef(self.manifest)

        if list(self.rdf.triples((manifest, None, None))):
            return manifest
        else:
            return self.rdf.subjects(None, self.manifest).next()

    def get_object(self, subject=None, predicate=None):
        """Eliminates some of the glue code for searching RDF. Pass
        in a URIRef object (generated by the `uri` function above or
        a BNode object (returned by this function) for either of the
        parameters."""

        # Get the result of the search
        results = self.rdf.objects(subject, predicate)
        as_list = list(results)

        # Don't raise exceptions, value test!
        if not as_list:
            return None

        return as_list[0]

    def get_objects(self, subject=None, predicate=None):
        """Same as get_object, except returns a list of objects which
        satisfy the query rather than a single result."""

        # Get the result of the search
        results = self.rdf.objects(subject, predicate)
        return list(results)
